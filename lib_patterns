//integration.js
const doLookup = async (entities, options, cb) => {
  try {
    // set authentication headers and options at top of doLookup
    authenticatedPolarityRequest.setAuthHeaders({
      ...options,
      'X-Api-key': options.apiKey
    });

    const lookupResults = await Promise.all(
      entities.map(async (entity) => {
        const jobs = await fetchJobs(entity);

        return createResultObject(entity, jobs);
      })
    );

    Logger.trace({ lookupResults }, 'Lookup Results');
    cb(null, lookupResults);
  } catch (error) {
    const errorAsPojo = parseErrorToReadableJSON(error);
    Logger.error({ error: errorAsPojo }, 'Error in doLookup');
    cb(error);
  }
};

// PolarityRequest.js
const fs = require('fs');
const request = require('postman-request');
const { getLogger } = require('./logger');
const { NetworkError } = require('./errors');
const {
  request: { ca, cert, key, passphrase, rejectUnauthorized, proxy }
} = require('../config/config.js');
const { get } = require('lodash/fp');

const _configFieldIsValid = (field) => typeof field === 'string' && field.length > 0;

const defaults = {
  ...(_configFieldIsValid(ca) && { ca: fs.readFileSync(ca) }),
  ...(_configFieldIsValid(cert) && { cert: fs.readFileSync(cert) }),
  ...(_configFieldIsValid(key) && { key: fs.readFileSync }),
  ...(_configFieldIsValid(passphrase) && { passphrase }),
  ...(_configFieldIsValid(proxy) && { proxy }),
  ...(typeof rejectUnauthorized === 'boolean' && { rejectUnauthorized }),
  json: true
};

class PolarityRequest {
  constructor () {
    this.requestWithDefaults = request.defaults(defaults);
  }

  async request (requestOptions) {
    return new Promise(async (resolve, reject) => {
      this.requestWithDefaults(requestOptions, (err, response) => {
        if (err) {
          return reject(
            new NetworkError('Unable to complete network request', {
              cause: err,
              requestOptions
            })
          );
        }

        resolve({
          ...response,
          requestOptions
        });
      });
    });
  }
}

class AuthenticatedPolarityRequest extends PolarityRequest {
  setAuthHeaders (options) {
    this.url = options.url;
    this.headers = {
      ...(options && { ...options })
    };
  }

  async request (requestOptions) {
    const Logger = getLogger();

    const authenticatedRequestOptions = {
      method: requestOptions.method,
      url: this.url + requestOptions.path,
      headers: this.headers,
      ...(get('body', requestOptions) && { body: requestOptions.body })
    };

    Logger.trace({ authenticatedRequestOptions }, 'Authenticated Request Options');

    return new Promise(async (resolve, reject) => {
      this.requestWithDefaults(authenticatedRequestOptions, (err, response) => {
        Logger.trace(
          { err, response, authenticatedRequestOptions },
          'Authenticated Request Response'
        );

        if (err) {
          return reject(
            new NetworkError('Unable to complete network request', {
              cause: err,
              authenticatedRequestOptions
            })
          );
        }

        resolve({
          ...response,
          authenticatedRequestOptions
        });
      });
    });
  }
}

module.exports = {
  polarityRequest: new PolarityRequest(),
  authenticatedPolarityRequest: new AuthenticatedPolarityRequest()
};
